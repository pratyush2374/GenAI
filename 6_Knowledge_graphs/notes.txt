Knowledge Graph
----------------------------------------------------
RAG 
    Indexing 
    Retrieval 

Embedding relations in vectors

Nodes + Edges  ----> Graph
There can be many different seperate graphs
Try to get one node from the graph then go to nearest relations
vector db has chunks 

----------------------------------------------------
1st problem is to find revelant chunks
Find vector embedding from the question using similarity 
And also store the node's data in vector dbs 
Helpful in GPT's Memory

----------------------------------------------------
Neo4j

Use cipher queries
Cloud and Self host
Node == Properites == Entities
----------------------------------------------------
CREATE (c : Company  {name : 'ChaiCode' }) return c
MATCH (n : Company) return n

MATCH (n : Person {name : "Pratyush"}), (c:Company {name : "ChaiCode"}) 
CREATE (n) -[:WORKS]-> (c)
return n, c

----------------------------------------------------
Indexing
    RAW
        PDF chunking
        Get revelant entities from the chunk eg -> places, locations, things 
        Load all the entities in the DB using MERGE
        Also ask for relationships bwtn the entities
        Create relations btwn entities
    Langchain
        Extracing stuctured info from the text 
        Storing into graph db for down
    Mem0 based
        Generate cipher query frrom the prompt
        Get the nodes id 
        Create vector embeddings and store with with the ids of nodes
Retrieval
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
----------------------------------------------------
services:
  qdrant:
    image: gdrant/qdrant
    ports:
      - "6333:6333"
      - "6334:6334"

  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: "username/password"
      NEO4JLABS_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,apoc.meta.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,apoc.meta.*"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j_config: "true"

----------------------------------------------------
Links 

https://app.eraser.io/workspace/OztkHHJmaLO9E2mj005h?origin=share
