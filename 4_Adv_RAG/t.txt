['febba53e-f08a-4e80-bb43-4a1fdcb35488', '6dfa51b5-168e-4070-bf7f-03f3db11a13f', '3cca9629-39b9-47f4-9d6e-8604a19ccde0', '969a22a4-2968-439c-ac78-1879fd869c23', 'ab23d812-a916-4ddd-a35c-922e8847fa6b']



Page 21:
wouldn’t work if you swapped out the arrow function for a standard function.
const event = {
    name: 'Birthday Party',
    guestList: ['Andrew', 'Jen', 'Mike'],
    printGuestList() {
        console.log('Guest list for ' + this.name)

        this.guestList.forEach((guest) => {
            console.log(guest + ' is attending ' + this.name)
        })
    }
}

event.printGuestList()
Links
• Arrow function
Lesson 9: Refactoring to Use Arrow Functions
In this lesson, you’ll use what you’ve learned about arrow functions to integrate them into
the Node.js app.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.Page 20:
Version 1.0 20
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Lesson 8: ES6 Aside: Arrow Functions
In this lesson, you’ll learn how to use ES6 arrow functions. Arrow functions come with a
few great features, making them a nice alternative to the standard ES5 function. You’ll
explore the new syntax and learn when to use them!
Arrow Functions
Arrow functions offer up an alternative syntax from the standard ES5 function. The snippet
below shows an example of a standard function and then an arrow function. While the
syntax is obviously different, you still have the two important pieces, an arguments list and
a function body.
// const square function (x) {
//     return x * x
// }

const square = (x) => {
    return x * x
}

console.log(square(2))    // Will print: 4
Shorthand SyntaxPage 20:
a function body.
// const square function (x) {
//     return x * x
// }

const square = (x) => {
    return x * x
}

console.log(square(2))    // Will print: 4
Shorthand Syntax
Arrow functions have an optional shorthand syntax. This is useful when you have a
function that immediately returns a value. The example below shows how this can be
used.
const squareAlt = (x) => x * x


console.log(squareAlt(2)) // Will print: 4
Notice that two important things are missing from the function definition. First, the curly
braces wrapping the function body have been removed as well as the return statement.
In place of both is the value to be returned. There’s no need for an explicit return
statement, as the value provide is implicitly returned.Page 21:
Version 1.0 21
This Binding
Arrow functions don’t bind their own this value. Instead, the this value of the scope in
which it was defined is accessible. This makes arrow functions bad candidates for
methods, as this won’t be a reference to the object the method is defined on.
For methods, ES6 provides a new method definition syntax. You can see this in the
definition of the printGuestList method below. That function is a standard function, just
with a shorthand syntax which allows for the removal of the colon and the function
keyword.
Because arrow functions don’t bind this, they work well for everything except methods. As
shown below, the arrow function passed to forEach is able to access this.name correctly,
as it’s defined as an arrow function and doesn’t have a this binding of its own. That code
wouldn’t work if you swapped out the arrow function for a standard function.
const event = {
    name: 'Birthday Party',
    guestList: ['Andrew', 'Jen', 'Mike'],